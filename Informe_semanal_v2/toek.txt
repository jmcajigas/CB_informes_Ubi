// Init global variables
const ubidots = new Ubidots();
const arrayVarsColors = [
  { label: 'ea-administrativo', color: '#4E79A7' },              // Azul claro
  { label: 'ea-subestacion-caldera', color: '#F28E2B' },                  // Naranja
  { label: 'ea-subestacion-1', color: '#E15759' },   // Rojo
  { label: 'ea-subestacion-2', color: '#76B7B2' },                // Verde azulado
];// Array that contain variables list to filter into chart
var token = undefined;
var dateRange = undefined;
var device = undefined;


// Function to 
ubidots.on('receivedToken', function (data) {
	token = data;
});
ubidots.on('selectedDashboardDateRange', function (data) {
	dateRange = data;
	if (device !== undefined && token != undefined) {
		drawChart();
	}
});
ubidots.on('selectedDevice', function (data) {
	device = data;
	if (dateRange !== undefined && token != undefined) {
		drawChart();
	}
});
ubidots.on('isRealTimeActive', function (data) {
	if (dateRange !== undefined && device !== undefined && token != undefined) {
		if (data === true) {
			drawChart();
		}
	};
	
});
ubidots.on('dashboardRefreshed', function () {
	if (dateRange !== undefined && device !== undefined && token != undefined) {
		drawChart();
	};
});
ubidots.on('ready', function (data) {
	drawChart();
});

function drawChart() {
	document.getElementById("chart").style.display = 'none';
	document.getElementById("imgLoading").style.display = 'block';
	getVariablesFromDevice(device)
		.then((data) => {
			const specificVariables = data.results.filter((variable) => arrayVarsColors.find(stg => stg.label === variable.label));
			fetchSpecificVariablesWithValues(specificVariables)
				.then((specificVariablesWithValues) => {
					
					const chartData = [];
					for (const item of specificVariablesWithValues) {
						const totalSumValuesPerVariable = item ? sumValuesPerVariable(item) : null;
						const variableColor = arrayVarsColors.find((i) => i.label === item.label);
						chartData.push({ name: item.name, y: Math.round(totalSumValuesPerVariable), color: variableColor.color });
					}
					chartData.sort(function (a, b) {
						if (a.y > b.y) {
							return 1;
						}
						if (a.y < b.y) {
							return -1;
						}
						return 0;
					});
					buildChart(chartData);
				})
				.catch((error) => {
					console.log('There was a problem with the function fetchSpecificVariablesWithValues: ' + error.message);
				});
			
		})
		.catch((error) => {
			console.log('There was a problem with the function getVariablesFromDevice:' + error.message);
		});
}
function sumValuesPerVariable(selectedVariable) {
	let totalSum = 0;
	if (selectedVariable.values.length > 0) {
		for (const item of selectedVariable.values) {
			totalSum = totalSum + item.value;
		}
	}
	return totalSum;
}

async function fetchSpecificVariablesWithValues(arraySpecificVariables) {
  try {
	  const arrayResultSpecificVariables = [];
	  for (const item of arraySpecificVariables) {
		  const asyncResult = await waitVariablesWithValues(item);
		  arrayResultSpecificVariables.push(asyncResult);
	  };
    return arrayResultSpecificVariables;
  }
  catch(error) {
    console.error(`There was a problem with the function waitVariablesWithValues: ${error}`);
  }
};

async function waitVariablesWithValues(variable) {
  try {
    const responseValues = await fetchValuesFromVariable(variable);
    return responseValues;
  }
  catch(error) {
    console.error(`Could not get values: ${error}`);
  }
};

async function fetchValuesFromVariable(variable) {
  try {
    const valuesResult = await getValuesFromVariable(variable.id);
    return {...variable, values: valuesResult};
  }
  catch(error) {
    console.error(`Could not get values: ${error}`);
  }
};

// GET variables from device
async function getVariablesFromDevice() {
	const url = `https://industrial.api.ubidots.com/api/v2.0/devices/${device}/variables/`;
	const response = await fetch(url, {
		method: 'GET',
		headers: {
		'Content-Type': 'application/json',
		'X-Auth-Token': token,
		},
	});
	return response.json();
};

//GET values from variable
async function getValuesFromVariable(inVariableKey) {
	let allResponse = [];
	let pageCount = 1;
	let fetchNextPage = true;
	
	do {
		const url = `https://industrial.api.ubidots.com/api/v1.6/variables/${inVariableKey}/values/?start=${dateRange.start}&end=${dateRange.end}&page=${pageCount}`;
		const response = await fetch(url, {
			method: 'GET',
			headers: {
			'Content-Type': 'application/json',
			'X-Auth-Token': token,
			},
		});
		const { next, results } = await response.json();
		allResponse = allResponse.concat(results)
		if (next) {
			pageCount++;
		} else {
			fetchNextPage = false;
		}
	} while (fetchNextPage);

	return allResponse;
};

//////////-> Char 
function buildChart(dataSeries) {
	const pieColors = [];
	const newDataSeries = dataSeries.map((ar) => {
		pieColors.push(ar.color);
		return { name: ar.name, y: ar.y };
	})
	document.getElementById("imgLoading").style.display = 'none';
	document.getElementById("chart").style.display = 'block';
	Highcharts.chart('container', {
		chart: {
			plotBackgroundColor: null,
			plotBorderWidth: null,
			plotShadow: false,
			type: 'pie'
		},
		title: {
			text: ' '
		},
		tooltip: {
			pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
		},
		accessibility: {
			point: {
				valueSuffix: '%'
			}
		},
		plotOptions: {
			pie: {
				allowPointSelect: true,
				colors: arrayVarsColors,
				cursor: 'pointer',
				dataLabels: {
					enabled: true,
					format: '<b>{point.name}</b>: {point.percentage:.1f} %'
				}
			}
		},
		series: [{
        	name: 'Variables',
        	colorByPoint: true,
        	data: dataSeries,
    	}]
	});
}